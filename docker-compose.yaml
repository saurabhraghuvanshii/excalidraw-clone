services:
 frontend:
  build:
   context: ./
   dockerfile: docker/Dockerfile.frontend
  container_name: frontend
  ports:
   - "3000:3000"
  environment:
   - NODE_ENV=production
   - DATABASE_URL=postgresql://postgres:postgres@database:5432/drawnew
  depends_on:
   - http-backend
   - ws-backend

 http-backend:
  container_name: http-backend
  build:
   context: ./
   dockerfile: docker/Dockerfile.backend
   args:
    - DATABASE_URL=postgresql://postgres:postgres@database:5432/drawnew
    - JWT_SECRET=${JWT_SECRET}
  ports:
   - "3001:3001"
  environment:
   - NODE_ENV=production
   - DATABASE_URL=postgresql://postgres:postgres@database:5432/drawnew
   - JWT_SECRET=${JWT_SECRET}
  depends_on:
   database:
    condition: service_healthy

 ws-backend:
  container_name: ws-backend
  build:
   context: ./
   dockerfile: docker/Dockerfile.ws
   args:
    - DATABASE_URL=postgresql://postgres:postgres@database:5432/drawnew
    - JWT_SECRET=${JWT_SECRET}
  ports:
   - "8080:8080"
  environment:
   - NODE_ENV=production
   - DATABASE_URL=postgresql://postgres:postgres@database:5432/drawnew
  depends_on:
   - http-backend

 database:
  image: postgres:13-alpine
  container_name: db
  restart: always
  environment:
   - POSTGRES_DB=drawnew
   - POSTGRES_USER=postgres
   - POSTGRES_PASSWORD=postgres
  volumes:
   - postgres_data:/var/lib/postgresql/data
  ports:
   - "5432:5432"
  healthcheck:
    test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
    interval: 5s
    timeout: 3s
    retries: 6

volumes: 
  postgres_data:
