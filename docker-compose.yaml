services:
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      args:
        - DATABASE_URL=postgresql://postgres:postgres@database:5432/drawnew
        - JWT_SECRET=${JWT_SECRET}
        - NEXT_PUBLIC_HTTP_BACKEND=http://http-backend:3001
        - NEXT_PUBLIC_WS_BACKEND=ws://ws-backend:8080
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DOCKER_ENV=true
      - DATABASE_URL=postgresql://postgres:postgres@database:5432/drawnew
      - JWT_SECRET=${JWT_SECRET}
      - NEXT_PUBLIC_HTTP_BACKEND=http://localhost:3001
      - NEXT_PUBLIC_WS_BACKEND=ws://localhost:8080
    depends_on:
      - http-backend
      - ws-backend

  http-backend:
    container_name: http-backend
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      args:
        - JWT_SECRET=${JWT_SECRET}
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DOCKER_ENV=true
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=postgresql://postgres:postgres@database:5432/drawnew
    depends_on:
      database:
        condition: service_healthy

  ws-backend:
    container_name: ws-backend
    build:
      context: .
      dockerfile: docker/Dockerfile.ws
      args:
        - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - DOCKER_ENV=true
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=postgresql://postgres:postgres@database:5432/drawnew
    depends_on:
      - http-backend

  database:
    image: postgres:13-alpine
    container_name: db
    restart: always
    environment:
      - POSTGRES_DB=drawnew
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 5s
      timeout: 3s
      retries: 6

volumes:
  postgres_data:
